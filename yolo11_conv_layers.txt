SUN@Lenovo-Flex-5 MINGW64 ~/desktop/python/ultralytics-new/ultralytics-improved (feature-branch)
$ yolo train model=ultralytics/cfg/models/11/yolo11.yaml data=ultralytics/cfg/datasets/coco8.yaml epochs=100 batch=16 imgsz=640 pretrained=False verbose=True

sahil@DESKTOP-80OIBSK MINGW64 ~/Desktop/Python/ultalytics/ultralytics-improved (enhancedc3k2-branch)
$ yolo train model=ultralytics/cfg/models/11/yolo11.yaml data=ultralytics/cfg/datasets/rsud20k-sahil.yaml epochs=100 batch=16 imgsz=640 pretrained=False verbose=True

WARNING ⚠️ no model scale passed. Assuming scale='n'.
Conv start
Input conv Shape: torch.Size([1, 3, 256, 256])
self.conv Shape: torch.Size([1, 16, 128, 128])
self.bn Shape: torch.Size([1, 16, 128, 128])
self.act/output Shape: torch.Size([1, 16, 128, 128])
Conv end
Conv start
Input conv Shape: torch.Size([1, 16, 128, 128])
self.conv Shape: torch.Size([1, 32, 64, 64])
self.bn Shape: torch.Size([1, 32, 64, 64])
self.act/output Shape: torch.Size([1, 32, 64, 64])
Conv end
C2f start
Conv start
Input conv Shape: torch.Size([1, 32, 64, 64])
self.conv Shape: torch.Size([1, 32, 64, 64])
self.bn Shape: torch.Size([1, 32, 64, 64])
self.act/output Shape: torch.Size([1, 32, 64, 64])
Conv end
C2f cv1 shape: torch.Size([1, 32, 64, 64])
C2f y0 chunk shape: torch.Size([1, 16, 64, 64])
C2f y1 chunk shape: torch.Size([1, 16, 64, 64])
C2f self.m : ModuleList(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 1
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 16, 64, 64])
self.conv Shape: torch.Size([1, 8, 64, 64])
self.bn Shape: torch.Size([1, 8, 64, 64])
self.act/output Shape: torch.Size([1, 8, 64, 64])
Conv end
cv1 shape: torch.Size([1, 8, 64, 64])
Conv start
Input conv Shape: torch.Size([1, 8, 64, 64])
self.conv Shape: torch.Size([1, 16, 64, 64])
self.bn Shape: torch.Size([1, 16, 64, 64])
self.act/output Shape: torch.Size([1, 16, 64, 64])
Conv end
cv2 shape: torch.Size([1, 16, 64, 64])
input + cv2 if self.add shape: torch.Size([1, 16, 64, 64])
Bottleneck c2f end
C2f y0 extend shape after self.m: torch.Size([1, 16, 64, 64])
C2f y1 extend shape after self.m: torch.Size([1, 16, 64, 64])
C2f y2 extend shape after self.m: torch.Size([1, 16, 64, 64])
C2f cat shape: torch.Size([1, 48, 64, 64])
Conv start
Input conv Shape: torch.Size([1, 48, 64, 64])
self.conv Shape: torch.Size([1, 64, 64, 64])
self.bn Shape: torch.Size([1, 64, 64, 64])
self.act/output Shape: torch.Size([1, 64, 64, 64])
Conv end
C2f cv2 shape: torch.Size([1, 64, 64, 64])
C2f end
Conv start
Input conv Shape: torch.Size([1, 64, 64, 64])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
C2f start
Conv start
Input conv Shape: torch.Size([1, 64, 32, 32])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
C2f cv1 shape: torch.Size([1, 64, 32, 32])
C2f y0 chunk shape: torch.Size([1, 32, 32, 32])
C2f y1 chunk shape: torch.Size([1, 32, 32, 32])
C2f self.m : ModuleList(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 1
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 32, 32, 32])
self.conv Shape: torch.Size([1, 16, 32, 32])
self.bn Shape: torch.Size([1, 16, 32, 32])
self.act/output Shape: torch.Size([1, 16, 32, 32])
Conv end
cv1 shape: torch.Size([1, 16, 32, 32])
Conv start
Input conv Shape: torch.Size([1, 16, 32, 32])
self.conv Shape: torch.Size([1, 32, 32, 32])
self.bn Shape: torch.Size([1, 32, 32, 32])
self.act/output Shape: torch.Size([1, 32, 32, 32])
Conv end
cv2 shape: torch.Size([1, 32, 32, 32])
input + cv2 if self.add shape: torch.Size([1, 32, 32, 32])
Bottleneck c2f end
C2f y0 extend shape after self.m: torch.Size([1, 32, 32, 32])
C2f y1 extend shape after self.m: torch.Size([1, 32, 32, 32])
C2f y2 extend shape after self.m: torch.Size([1, 32, 32, 32])
C2f cat shape: torch.Size([1, 96, 32, 32])
Conv start
Input conv Shape: torch.Size([1, 96, 32, 32])
self.conv Shape: torch.Size([1, 128, 32, 32])
self.bn Shape: torch.Size([1, 128, 32, 32])
self.act/output Shape: torch.Size([1, 128, 32, 32])
Conv end
C2f cv2 shape: torch.Size([1, 128, 32, 32])
C2f end
Conv start
Input conv Shape: torch.Size([1, 128, 32, 32])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f start
Conv start
Input conv Shape: torch.Size([1, 128, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f cv1 shape: torch.Size([1, 128, 16, 16])
C2f y0 chunk shape: torch.Size([1, 64, 16, 16])
C2f y1 chunk shape: torch.Size([1, 64, 16, 16])
C2f self.m : ModuleList(
  (0): C3k(
    (cv1): Conv(
      (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
), len: 1
C3 start using c3k
Conv start
Input conv Shape: torch.Size([1, 64, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
C3 cv1 shape: torch.Size([1, 32, 16, 16])
C3 self.m : Sequential(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
  (1): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 2
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 32, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
cv1 shape: torch.Size([1, 32, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 32, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
cv2 shape: torch.Size([1, 32, 16, 16])
input + cv2 if self.add shape: torch.Size([1, 32, 16, 16])
Bottleneck c2f end
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 32, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
cv1 shape: torch.Size([1, 32, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 32, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
cv2 shape: torch.Size([1, 32, 16, 16])
input + cv2 if self.add shape: torch.Size([1, 32, 16, 16])
Bottleneck c2f end
C3 self.m shape: torch.Size([1, 32, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 64, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
C3 cv2 shape: torch.Size([1, 32, 16, 16])
C3 cat shape: torch.Size([1, 64, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 64, 16, 16])
self.conv Shape: torch.Size([1, 64, 16, 16])
self.bn Shape: torch.Size([1, 64, 16, 16])
self.act/output Shape: torch.Size([1, 64, 16, 16])
Conv end
C3 cv3 shape: torch.Size([1, 64, 16, 16])
C3 end
C2f y0 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f y1 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f y2 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f cat shape: torch.Size([1, 192, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 192, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f cv2 shape: torch.Size([1, 128, 16, 16])
C2f end
Conv start
Input conv Shape: torch.Size([1, 128, 16, 16])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2f start
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2f cv1 shape: torch.Size([1, 256, 8, 8])
C2f y0 chunk shape: torch.Size([1, 128, 8, 8])
C2f y1 chunk shape: torch.Size([1, 128, 8, 8])
C2f self.m : ModuleList(
  (0): C3k(
    (cv1): Conv(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
), len: 1
C3 start using c3k
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
C3 cv1 shape: torch.Size([1, 64, 8, 8])
C3 self.m : Sequential(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
  (1): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 2
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv1 shape: torch.Size([1, 64, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv2 shape: torch.Size([1, 64, 8, 8])
input + cv2 if self.add shape: torch.Size([1, 64, 8, 8])
Bottleneck c2f end
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv1 shape: torch.Size([1, 64, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv2 shape: torch.Size([1, 64, 8, 8])
input + cv2 if self.add shape: torch.Size([1, 64, 8, 8])
Bottleneck c2f end
C3 self.m shape: torch.Size([1, 64, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
C3 cv2 shape: torch.Size([1, 64, 8, 8])
C3 cat shape: torch.Size([1, 128, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
C3 cv3 shape: torch.Size([1, 128, 8, 8])
C3 end
C2f y0 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y1 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y2 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f cat shape: torch.Size([1, 384, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 384, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2f cv2 shape: torch.Size([1, 256, 8, 8])
C2f end ------------------------------------------------------------------------
SPPF start
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
SPPF self.cv1 Shape: torch.Size([1, 128, 8, 8])
SPPF y (converted to list) len: 1
SPPF self.m : MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
C2f y0 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y1 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y2 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y3 extend shape after self.m: torch.Size([1, 128, 8, 8])
SPPF cat shape: torch.Size([1, 512, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 512, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
SPPF cv2 shape: torch.Size([1, 256, 8, 8])
SPPF end ------------------------------------------------------------------------
C2PSA start
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2PSA cv1 shape: torch.Size([1, 256, 8, 8])
C2PSA self.c : 128
C2PSA a shape: torch.Size([1, 128, 8, 8]), b shape: torch.Size([1, 128, 8, 8])
C2PSA self.m : Sequential(
  (0): PSABlock(
    (attn): Attention(
      (qkv): Conv(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): Identity()
      )
      (proj): Conv(
        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): Identity()
      )
      (pe): Conv(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): Identity()
      )
    )
    (ffn): Sequential(
      (0): Conv(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): SiLU()
      )
      (1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): Identity()
      )
    )
  )
), len: 1
PSABlock start
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
PSABlock x self.add true, x + self.attn used shape: torch.Size([1, 128, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
PSABlock x self.add true, x + self.ffn used shape: torch.Size([1, 128, 8, 8])
PSABlock end
C2PSA b after self.m shape: torch.Size([1, 128, 8, 8])
C2PSA cat shape: torch.Size([1, 256, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2PSA cv2 shape: torch.Size([1, 256, 8, 8])
C2PSA end ------------------------------------------------------------------------
C2f start
Conv start
Input conv Shape: torch.Size([1, 384, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f cv1 shape: torch.Size([1, 128, 16, 16])
C2f y0 chunk shape: torch.Size([1, 64, 16, 16])
C2f y1 chunk shape: torch.Size([1, 64, 16, 16])
C2f self.m : ModuleList(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 1
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 64, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
cv1 shape: torch.Size([1, 32, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 32, 16, 16])
self.conv Shape: torch.Size([1, 64, 16, 16])
self.bn Shape: torch.Size([1, 64, 16, 16])
self.act/output Shape: torch.Size([1, 64, 16, 16])
Conv end
cv2 shape: torch.Size([1, 64, 16, 16])
input + cv2 if self.add shape: torch.Size([1, 64, 16, 16])
Bottleneck c2f end
C2f y0 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f y1 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f y2 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f cat shape: torch.Size([1, 192, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 192, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f cv2 shape: torch.Size([1, 128, 16, 16]) -------------------------------
C2f end
C2f start
Conv start
Input conv Shape: torch.Size([1, 256, 32, 32])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
C2f cv1 shape: torch.Size([1, 64, 32, 32])
C2f y0 chunk shape: torch.Size([1, 32, 32, 32])
C2f y1 chunk shape: torch.Size([1, 32, 32, 32])
C2f self.m : ModuleList(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 1
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 32, 32, 32])
self.conv Shape: torch.Size([1, 16, 32, 32])
self.bn Shape: torch.Size([1, 16, 32, 32])
self.act/output Shape: torch.Size([1, 16, 32, 32])
Conv end
cv1 shape: torch.Size([1, 16, 32, 32])
Conv start
Input conv Shape: torch.Size([1, 16, 32, 32])
self.conv Shape: torch.Size([1, 32, 32, 32])
self.bn Shape: torch.Size([1, 32, 32, 32])
self.act/output Shape: torch.Size([1, 32, 32, 32])
Conv end
cv2 shape: torch.Size([1, 32, 32, 32])
input + cv2 if self.add shape: torch.Size([1, 32, 32, 32])
Bottleneck c2f end
C2f y0 extend shape after self.m: torch.Size([1, 32, 32, 32])
C2f y1 extend shape after self.m: torch.Size([1, 32, 32, 32])
C2f y2 extend shape after self.m: torch.Size([1, 32, 32, 32])
C2f cat shape: torch.Size([1, 96, 32, 32])
Conv start
Input conv Shape: torch.Size([1, 96, 32, 32])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
C2f cv2 shape: torch.Size([1, 64, 32, 32]) -----------------------------------
C2f end
Conv start
Input conv Shape: torch.Size([1, 64, 32, 32])
self.conv Shape: torch.Size([1, 64, 16, 16])
self.bn Shape: torch.Size([1, 64, 16, 16])
self.act/output Shape: torch.Size([1, 64, 16, 16])
Conv end
C2f start
Conv start
Input conv Shape: torch.Size([1, 192, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f cv1 shape: torch.Size([1, 128, 16, 16])
C2f y0 chunk shape: torch.Size([1, 64, 16, 16])
C2f y1 chunk shape: torch.Size([1, 64, 16, 16])
C2f self.m : ModuleList(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 1
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 64, 16, 16])
self.conv Shape: torch.Size([1, 32, 16, 16])
self.bn Shape: torch.Size([1, 32, 16, 16])
self.act/output Shape: torch.Size([1, 32, 16, 16])
Conv end
cv1 shape: torch.Size([1, 32, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 32, 16, 16])
self.conv Shape: torch.Size([1, 64, 16, 16])
self.bn Shape: torch.Size([1, 64, 16, 16])
self.act/output Shape: torch.Size([1, 64, 16, 16])
Conv end
cv2 shape: torch.Size([1, 64, 16, 16])
input + cv2 if self.add shape: torch.Size([1, 64, 16, 16])
Bottleneck c2f end
C2f y0 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f y1 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f y2 extend shape after self.m: torch.Size([1, 64, 16, 16])
C2f cat shape: torch.Size([1, 192, 16, 16])
Conv start
Input conv Shape: torch.Size([1, 192, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
C2f cv2 shape: torch.Size([1, 128, 16, 16])-----------------------------------
C2f end
Conv start
Input conv Shape: torch.Size([1, 128, 16, 16])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
C2f start
Conv start
Input conv Shape: torch.Size([1, 384, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2f cv1 shape: torch.Size([1, 256, 8, 8])
C2f y0 chunk shape: torch.Size([1, 128, 8, 8])
C2f y1 chunk shape: torch.Size([1, 128, 8, 8])
C2f self.m : ModuleList(
  (0): C3k(
    (cv1): Conv(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv3): Conv(
      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (m): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
      )
    )
  )
), len: 1
C3 start using c3k
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
C3 cv1 shape: torch.Size([1, 64, 8, 8])
C3 self.m : Sequential(
  (0): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
  (1): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
    (cv2): Conv(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act): SiLU()
    )
  )
), len: 2
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv1 shape: torch.Size([1, 64, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv2 shape: torch.Size([1, 64, 8, 8])
input + cv2 if self.add shape: torch.Size([1, 64, 8, 8])
Bottleneck c2f end
Bottleneck c2f start
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv1 shape: torch.Size([1, 64, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
cv2 shape: torch.Size([1, 64, 8, 8])
input + cv2 if self.add shape: torch.Size([1, 64, 8, 8])
Bottleneck c2f end
C3 self.m shape: torch.Size([1, 64, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
C3 cv2 shape: torch.Size([1, 64, 8, 8])
C3 cat shape: torch.Size([1, 128, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 128, 8, 8])
self.conv Shape: torch.Size([1, 128, 8, 8])
self.bn Shape: torch.Size([1, 128, 8, 8])
self.act/output Shape: torch.Size([1, 128, 8, 8])
Conv end
C3 cv3 shape: torch.Size([1, 128, 8, 8])
C3 end
C2f y0 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y1 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f y2 extend shape after self.m: torch.Size([1, 128, 8, 8])
C2f cat shape: torch.Size([1, 384, 8, 8])
Conv start
Input conv Shape: torch.Size([1, 384, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
C2f cv2 shape: torch.Size([1, 256, 8, 8])----------------------------
C2f end
Conv start
Input conv Shape: torch.Size([1, 64, 32, 32])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
Conv start
Input conv Shape: torch.Size([1, 64, 32, 32])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
Conv start
Input conv Shape: torch.Size([1, 64, 32, 32])
self.conv Shape: torch.Size([1, 64, 32, 32])
self.bn Shape: torch.Size([1, 64, 32, 32])
self.act/output Shape: torch.Size([1, 64, 32, 32])
Conv end
Conv start
Input conv Shape: torch.Size([1, 64, 32, 32])
self.conv Shape: torch.Size([1, 80, 32, 32])
self.bn Shape: torch.Size([1, 80, 32, 32])
self.act/output Shape: torch.Size([1, 80, 32, 32])
Conv end
Conv start
Input conv Shape: torch.Size([1, 80, 32, 32])
self.conv Shape: torch.Size([1, 80, 32, 32])
self.bn Shape: torch.Size([1, 80, 32, 32])
self.act/output Shape: torch.Size([1, 80, 32, 32])
Conv end
Conv start
Input conv Shape: torch.Size([1, 80, 32, 32])
self.conv Shape: torch.Size([1, 80, 32, 32])
self.bn Shape: torch.Size([1, 80, 32, 32])
self.act/output Shape: torch.Size([1, 80, 32, 32])
Conv end
Conv start
Input conv Shape: torch.Size([1, 128, 16, 16])
self.conv Shape: torch.Size([1, 64, 16, 16])
self.bn Shape: torch.Size([1, 64, 16, 16])
self.act/output Shape: torch.Size([1, 64, 16, 16])
Conv end
Conv start
Input conv Shape: torch.Size([1, 64, 16, 16])
self.conv Shape: torch.Size([1, 64, 16, 16])
self.bn Shape: torch.Size([1, 64, 16, 16])
self.act/output Shape: torch.Size([1, 64, 16, 16])
Conv end
Conv start
Input conv Shape: torch.Size([1, 128, 16, 16])
self.conv Shape: torch.Size([1, 128, 16, 16])
self.bn Shape: torch.Size([1, 128, 16, 16])
self.act/output Shape: torch.Size([1, 128, 16, 16])
Conv end
Conv start
Input conv Shape: torch.Size([1, 128, 16, 16])
self.conv Shape: torch.Size([1, 80, 16, 16])
self.bn Shape: torch.Size([1, 80, 16, 16])
self.act/output Shape: torch.Size([1, 80, 16, 16])
Conv end
Conv start
Input conv Shape: torch.Size([1, 80, 16, 16])
self.conv Shape: torch.Size([1, 80, 16, 16])
self.bn Shape: torch.Size([1, 80, 16, 16])
self.act/output Shape: torch.Size([1, 80, 16, 16])
Conv end
Conv start
Input conv Shape: torch.Size([1, 80, 16, 16])
self.conv Shape: torch.Size([1, 80, 16, 16])
self.bn Shape: torch.Size([1, 80, 16, 16])
self.act/output Shape: torch.Size([1, 80, 16, 16])
Conv end
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 64, 8, 8])
self.conv Shape: torch.Size([1, 64, 8, 8])
self.bn Shape: torch.Size([1, 64, 8, 8])
self.act/output Shape: torch.Size([1, 64, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 256, 8, 8])
self.bn Shape: torch.Size([1, 256, 8, 8])
self.act/output Shape: torch.Size([1, 256, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 256, 8, 8])
self.conv Shape: torch.Size([1, 80, 8, 8])
self.bn Shape: torch.Size([1, 80, 8, 8])
self.act/output Shape: torch.Size([1, 80, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 80, 8, 8])
self.conv Shape: torch.Size([1, 80, 8, 8])
self.bn Shape: torch.Size([1, 80, 8, 8])
self.act/output Shape: torch.Size([1, 80, 8, 8])
Conv end
Conv start
Input conv Shape: torch.Size([1, 80, 8, 8])
self.conv Shape: torch.Size([1, 80, 8, 8])
self.bn Shape: torch.Size([1, 80, 8, 8])
self.act/output Shape: torch.Size([1, 80, 8, 8])
Conv end
New https://pypi.org/project/ultralytics/8.3.35 available 😃 Update with 'pip install -U ultralytics'
Ultralytics 8.3.34 🚀 Python-3.11.2 torch-2.4.1+cpu CPU (AMD Ryzen 5 5500U with Radeon Graphics)
engine\trainer: task=detect, mode=train, model=ultralytics/cfg/models/11/yolo11.yaml, data=ultralytics/cfg/datasets/coco8.yaml, epochs=100, time=None, patience=100, batch=16, imgsz=640, save=True, save_period=-1, cache=False, device=None, workers=8, project=None, name=train3, exist_ok=False, pretrained=False, optimizer=auto, verbose=True, seed=0, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=True, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, copy_paste_mode=flip, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=runs\detect\train3


models -> utils -> loss
nn -> tasks.py -> def loss